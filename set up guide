# Setup Guide - House Rental App (MERN Stack)

## Prerequisites

1. *Node.js* - Download and install [Node.js](https://nodejs.org/) (v14+ recommended).
2. *MongoDB* - Set up a [MongoDB database](https://www.mongodb.com/) (either locally or on MongoDB Atlas).
3. *Git* - (Optional) for cloning the repository. Download [Git](https://git-scm.com/).

---

## Step 1: Clone the Repository

Open your terminal and clone the project repository.

bash
git clone https://github.com/your-username/house-rental-app.git
cd house-rental-app


---

## Step 2: Set Up the Backend (Node.js & Express)

1. *Navigate to the backend folder (root directory)*

   bash
   cd house-rental-app
   

2. *Install dependencies*

   Run the following command to install backend dependencies listed in package.json:

   bash
   npm install
   

3. *Configure environment variables*

   In the root directory, create a .env file with the following variables:

   plaintext
   MONGO_URI=<your_mongodb_connection_string>
   PORT=3000
   

   - Replace <your_mongodb_connection_string> with your MongoDB URI. For example, if using MongoDB Atlas, the URI format will look like mongodb+srv://<username>:<password>@cluster0.mongodb.net/<database>?retryWrites=true&w=majority.

4. *Run the server*

   Start the backend server with:

   bash
   npm start
   

   The server should start running on http://localhost:3000 (or the port you specified in .env).

---

## Step 3: Set Up the Frontend (React)

1. *Navigate to the client folder*

   Assuming your frontend code is located in a client folder, move into it:

   bash
   cd client
   

2. *Install dependencies*

   Run the following command to install frontend dependencies:

   bash
   npm install
   

3. *Start the frontend development server*

   Start the React frontend with:

   bash
   npm start
   

   This will launch the React app, typically at http://localhost:3001 or http://localhost:3000 (if the backend is on another port).

---

## Step 4: Test the User Registration API

1. *Send a test request*

   Use a tool like [Postman](https://www.postman.com/) or [cURL](https://curl.se/) to test the user registration API.

   - *URL*: http://localhost:3000/api/users/register
   - *Method*: POST
   - *Body* (JSON):

     json
     {
       "name": "John",
       "email": "john.doe@example.com",
       "password": "password123",
       "type": "tenant"
     }
     

2. *Verify Response*

   A successful response should look like:

   json
   {
     "message": "User registered successfully"
   }
   

---

## Step 5: Configure CORS (if needed)

If the frontend and backend are on different ports, ensure that CORS (Cross-Origin Resource Sharing) is enabled in the backend. You can add the cors package in the backend to handle this:

1. Install cors:

   bash
   npm install cors
   

2. Use it in your main backend file (app.js or server.js):

   javascript
   const cors = require("cors");
   app.use(cors());
   

---

## Step 6: Access the App in Browser

1. *Backend API*: Visit the API on http://localhost:3000/api.
2. *Frontend App*: Access the React app (typically http://localhost:3001).

Now, your app should be running with both backend and frontend communicating as expected.

---

## Additional Notes

- *Database*: Make sure MongoDB is running and accessible.
- *Error Handling*: If you encounter errors, check the logs in the terminal for debugging information.
- *Frontend & Backend Integration*: Ensure that frontend API calls point to the correct backend server address (e.g., http://localhost:3000/api).

---

Youâ€™re all set up! HappyÂ coding!Â ðŸŽ‰
